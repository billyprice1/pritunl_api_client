{"name":"Pritunl API Client","tagline":"API client for Pritunl written in Ruby","body":"# Pritunl API Client\r\n\r\n[![Gem Version](https://badge.fury.io/rb/pritunl_api_client.svg)](https://badge.fury.io/rb/pritunl_api_client)\r\n![](http://ruby-gem-downloads-badge.herokuapp.com/pritunl_api_client?type=total)\r\n[![Inline docs](http://inch-ci.org/github/eterry1388/pritunl_api_client.svg?branch=master)](http://inch-ci.org/github/eterry1388/pritunl_api_client)\r\n[![Dependency Status](https://gemnasium.com/eterry1388/pritunl_api_client.svg)](https://gemnasium.com/eterry1388/pritunl_api_client)\r\n\r\nAPI client for Pritunl written in Ruby.\r\n\r\n[Pritunl](https://github.com/pritunl/pritunl) is a distributed enterprise\r\nvpn server built using the OpenVPN protocol. See the official Pritunl API\r\ndocumentation here: https://pritunl.com/api.html.  I am not affiliated with\r\nPritunl.\r\n\r\n## Installation\r\n\r\n```bash\r\ngem install pritunl_api_client\r\n```\r\n\r\n## Usage\r\n\r\n```ruby\r\nrequire 'pritunl_api_client'\r\n\r\n@pritunl = PritunlApiClient::Client.new(\r\n  base_url:   'https://localhost:9700',\r\n  api_token:  'p7g444S3IZ5wmFvmzWmx14qACXdzQ25b',\r\n  api_secret: 'OpS9fjxkPI3DclkdKDDr6mqYVd0DJh4i',\r\n  verify_ssl: false\r\n)\r\n```\r\n\r\n## Ping\r\n\r\n### Server healthcheck.\r\n\r\n```ruby\r\n@pritunl.ping\r\n```\r\n\r\n## Status\r\n\r\n### Returns general information about the pritunl server.\r\n\r\n```ruby\r\n@pritunl.status\r\n\r\n{\r\n  \"host_count\" => 1,\r\n  \"servers_online\" => 1,\r\n  \"hosts_online\" => 1,\r\n  \"server_count\" => 2,\r\n  \"server_version\" => \"1.11.813.26\",\r\n  \"public_ip\" => \"10.55.87.4\",\r\n  \"user_count\" => 1,\r\n  \"notification\" => \"\",\r\n  \"users_online\" => 1,\r\n  \"local_networks\" => [\"10.55.87.3/31\", \"10.2.214.0/31\"],\r\n  \"current_host\" => \"0f273a6c32ed45259c1ecb1ec3ac05ce\",\r\n  \"org_count\" => 2\r\n}\r\n```\r\n\r\n## Log\r\n\r\n### Returns a list of server log entries sorted by time.\r\n\r\n```ruby\r\n@pritunl.log\r\n\r\n[\r\n  {\r\n    \"timestamp\" => 1450429682,\r\n    \"message\" => \"Deleted organization 'org1'.\",\r\n    \"id\" => \"567386a32221390ea53d8047\"\r\n  },\r\n  {\r\n    \"timestamp\" => 1450429682,\r\n    \"message\" => \"Deleted user 'user1'.\",\r\n    \"id\" => \"567386a32221390ea53d8045\"\r\n  },\r\n  {\r\n    \"timestamp\" => 1450429681,\r\n    \"message\" => \"Enabled user 'user2'.\",\r\n    \"id\" => \"567386a22221390ea53d8042\"\r\n  }\r\n]\r\n```\r\n\r\n## Events\r\n\r\n### Get a list of events (will poll up to 30 seconds)\r\n\r\n```ruby\r\n@pritunl.event( cursor: '55e9f1f1b0e730245677dc31' )\r\n\r\n[\r\n  {\r\n      \"id\" => \"55e9f1f1b0e730245677dc31\",\r\n      \"type\" => \"users_updated\",\r\n      \"timestamp\" => 1388495793,\r\n      \"resource_id\" => \"55e9f1f8b0e730245677dc34\"\r\n  },\r\n  {\r\n      \"id\" => \"55e9f1f2b0e730245677dc32\",\r\n      \"type\" => \"server_organizations_updated\",\r\n      \"timestamp\" => 1388495805,\r\n      \"resource_id\" => \"55e9f1f8b0e730245677dc33\"\r\n  }\r\n]\r\n```\r\n\r\n## Settings\r\n\r\n### Get system settings.\r\n\r\n```ruby\r\n@pritunl.settings.all\r\n\r\n{\r\n  \"username\" => \"user6\",\r\n  \"sso_admin\" => nil,\r\n  \"theme\" => \"dark\",\r\n  \"sso\" => nil,\r\n  \"sso_match\" => nil,\r\n  \"server_cert\" => \"-----BEGIN CERTIFICATE----------END CERTIFICATE-----\",\r\n  \"public_address\" => \"10.5.8.46\",\r\n  \"routed_subnet6\" => nil,\r\n  \"email_username\" => \"user1\",\r\n  \"sso_saml_issuer_url\" => nil,\r\n  \"sso_saml_cert\" => nil,\r\n  \"sso_token\" => nil,\r\n  \"email_password\" => true,\r\n  \"sso_onelogin_key\" => nil,\r\n  \"email_server\" => \"smtp.example.com\",\r\n  \"auditing\" => nil,\r\n  \"sso_secret\" => nil,\r\n  \"server_key\" => \"-----BEGIN PRIVATE KEY----------END PRIVATE KEY-----\",\r\n  \"default\" => nil,\r\n  \"sso_host\" => nil,\r\n  \"public_address6\" => \"2605:1480:2:a210::1\",\r\n  \"secret\" => \"9D1ZJTscrr2mK4Xnxw76ltmpwnH7udeO\",\r\n  \"sso_okta_token\" => nil,\r\n  \"sso_saml_url\" => nil,\r\n  \"token\" => \"UQRM0R3bsXDpy3p6nqtjfrbjujSadaAx\",\r\n  \"sso_org\" => nil,\r\n  \"email_from\" => \"first.last@example.com\"\r\n}\r\n```\r\n\r\n### Change the system settings.\r\n\r\n```ruby\r\n@pritunl.settings.update( theme: 'dark' )\r\n\r\n@pritunl.settings.update(\r\n  email_username: 'user1',\r\n  email_password: '12345',\r\n  email_server:   'smtp.example.com',\r\n  email_from:     'first.last@example.com'\r\n)\r\n```\r\n\r\n## Users\r\n\r\n### Returns a list of users in an organization sorted by name.\r\n\r\n```ruby\r\n@pritunl.user.all( organization_id: org['id'] )\r\n\r\n[\r\n  {\r\n    \"auth_type\" => \"local\",\r\n    \"status\" => false,\r\n    \"dns_servers\" => nil,\r\n    \"otp_secret\" => \"OPT4HTURJTW6JLQN\",\r\n    \"dns_mapping\" => nil,\r\n    \"dns_suffix\" => nil,\r\n    \"servers\" => [\r\n      {\r\n        \"status\" => false,\r\n        \"platform\" => nil,\r\n        \"server_id\" => \"567369be2231390ea53d76d4\",\r\n        \"local_address\" => \"10.139.82.6\",\r\n        \"remote_address\" => \"10.139.82.7\",\r\n        \"virt_address6\" => \"fd00:c0a8:e800:0:10.139.82.6\",\r\n        \"virt_address\" => \"10.139.82.6\",\r\n        \"name\" => \"server1\",\r\n        \"real_address\" => \"8.8.8.8:41536\",\r\n        \"connected_since\" => 1388498640,\r\n        \"id\" => \"55e9f995b0e73033d45b44da\",\r\n        \"device_name\" => nil\r\n      }\r\n    ],\r\n    \"disabled\" => false,\r\n    \"network_links\" => [],\r\n    \"sso\" => nil,\r\n    \"bypass_secondary\" => false,\r\n    \"id\" => \"55e9f98cb0e73033d45b44d7\",\r\n    \"audit\" => false,\r\n    \"name\" => \"user0\",\r\n    \"organization_name\" => \"org1\",\r\n    \"gravatar\" => true,\r\n    \"otp_auth\" => false,\r\n    \"organization\" => \"55e9f7c7b0e73033d45b44d4\",\r\n    \"type\" => \"client\",\r\n    \"email\" => \"user0@example.com\"\r\n  }\r\n]\r\n```\r\n\r\n### Returns a user from an organization.\r\n\r\n```ruby\r\n@pritunl.user.find( user['id'], organization_id: org['id'] )\r\n\r\n{\r\n  \"auth_type\" => \"local\",\r\n  \"dns_servers\" => nil,\r\n  \"otp_secret\" => \"OPT4HTURJTW6JLQN\",\r\n  \"dns_suffix\" => nil,\r\n  \"disabled\" => true,\r\n  \"bypass_secondary\" => false,\r\n  \"id\" => \"55e9f98cb0e73033d45b44d7\",\r\n  \"name\" => \"user0\",\r\n  \"organization_name\" => \"org1\",\r\n  \"organization\" => \"55e9f7c7b0e73033d45b44d4\",\r\n  \"type\" => \"client\",\r\n  \"email\" => \"user0@example.com\"\r\n}\r\n```\r\n\r\n### Create a new user in an organization. An array of users can be sent for bulk adding users.\r\n\r\n```ruby\r\n@pritunl.user.create(\r\n  organization_id: org['id'],\r\n  name: 'new_user',\r\n  email: 'new_user@example.com',\r\n  disabled: true\r\n)\r\n```\r\n\r\n### Rename or disabled an existing user in an organization. Disabling will also disconnect the user.\r\n\r\n```ruby\r\n@pritunl.user.update( user['id'],\r\n  organization_id: org['id'],\r\n  name: 'new_name',\r\n  email: 'new_email@example.com',\r\n  disabled: false\r\n)\r\n```\r\n\r\n### Delete an existing user in an organization, this will disconnect the user.\r\n\r\n```ruby\r\n@pritunl.user.delete( user['id'], organization_id: org['id'] )\r\n```\r\n\r\n### Generate a new two-step authentication secret for an existing user.\r\n\r\n```ruby\r\n@pritunl.user.otp_secret( user['id'], organization_id: org['id'] )\r\n```\r\n\r\n## Organizations\r\n\r\n### Returns a list of organizations on the server sorted by name.\r\n\r\n```ruby\r\n@pritunl.organization.all\r\n\r\n[\r\n  {\r\n    \"user_count\" => 512,\r\n    \"id\" => \"55e99499b0e7300fef77e2b1\",\r\n    \"name\" => \"org1\"\r\n  },\r\n  {\r\n    \"user_count\" => 1024,\r\n    \"id\" => \"55e9f1d4b0e730245677dc2d\",\r\n    \"name\" => \"org2\"\r\n  }\r\n]\r\n```\r\n\r\n### Returns an organization.\r\n\r\n```ruby\r\n@pritunl.organization.find( org['id'] )\r\n\r\n{\r\n  \"user_count\" => 512,\r\n  \"id\" => \"55e99499b0e7300fef77e2b1\",\r\n  \"name\" => \"org1\"\r\n}\r\n```\r\n\r\n### Create a new organization.\r\n\r\n```ruby\r\n@pritunl.organization.create( name: 'new_org' )\r\n```\r\n\r\n### Rename an existing organization.\r\n\r\n```ruby\r\n@pritunl.organization.update( org['id'], name: 'new_name' )\r\n```\r\n\r\n### Delete an existing organization.\r\n\r\n```ruby\r\n@pritunl.organization.delete( org['id'] )\r\n```\r\n\r\n## Keys\r\n\r\nIf you omit the `path` parameter on any of the `key` APIs below, the file content will be directly returned\r\nfrom the method rather than to a downloaded file.\r\n\r\n### Download a users key.\r\n\r\n```ruby\r\n@pritunl.key.download( organization_id: org['id'], user_id: user['id'], path: 'output.ovpn' )\r\n```\r\n\r\n### Download a users key tar archive.\r\n\r\n```ruby\r\n@pritunl.key.download_tar( organization_id: org['id'], user_id: user['id'], path: 'output.tar' )\r\n```\r\n\r\n### Download a users key zip archive.\r\n\r\n```ruby\r\n@pritunl.key.download_zip( organization_id: org['id'], user_id: user['id'], path: 'output.zip' )\r\n```\r\n\r\n### Download a users onc key Chromebook profile zip archive.\r\n\r\n```ruby\r\n@pritunl.key.download_chromebook_profile( organization_id: org['id'], user_id: user['id'], path: 'output.zip' )\r\n```\r\n\r\n### Generate a temporary url to download a users key archive.\r\n\r\n```ruby\r\n@pritunl.key.temporary_url( organization_id: org['id'], user_id: user['id'] )\r\n\r\n{\r\n  \"view_url\" => \"/k/MjyaVvGk\",\r\n  \"key_url\" => \"/key/4f5bd04d85414e20b0a451d642dab06d.tar\",\r\n  \"uri_url\" => \"/ku/MjyaVvGk\",\r\n  \"key_zip_url\" => \"/key/4f5bd04d85414e20b0a451d642dab06d.zip\",\r\n  \"key_onc_url\" => \"/key_onc/4f5bd04d85414e20b0a451d642dab06d.zip\",\r\n  \"id\" => \"4f5bd04d85414e20b0a451d642dab06d\"\r\n}\r\n```\r\n\r\n## Servers\r\n\r\n### Returns a list of servers.\r\n\r\n```ruby\r\n@pritunl.server.all\r\n```\r\n\r\n### Returns a server.\r\n\r\n```ruby\r\n@pritunl.server.find( server['id'] )\r\n\r\n{\r\n  \"status\" => \"pending\",\r\n  \"lzo_compression\" => false,\r\n  \"dns_servers\" => [\"8.8.4.4\"],\r\n  \"protocol\" => \"udp\",\r\n  \"ping_interval\" => 10,\r\n  \"dns_mapping\" => false,\r\n  \"network_mode\" => \"tunnel\",\r\n  \"debug\" => false,\r\n  \"network_end\" => nil,\r\n  \"bind_address\" => nil,\r\n  \"link_ping_interval\" => 1,\r\n  \"hash\" => \"sha1\",\r\n  \"ipv6_firewall\" => true,\r\n  \"inter_client\" => true,\r\n  \"id\" => \"5678d5286231390ea53eda96\",\r\n  \"network_start\" => nil,\r\n  \"network\" => \"10.11.6.0/24\",\r\n  \"local_networks\" => [],\r\n  \"uptime\" => nil,\r\n  \"user_count\" => 0,\r\n  \"name\" => \"server1\",\r\n  \"dh_param_bits\" => 2048,\r\n  \"max_clients\" => 2048,\r\n  \"users_online\" => 0,\r\n  \"replica_count\" => 1,\r\n  \"link_ping_timeout\" => 5,\r\n  \"port\" => 12533,\r\n  \"devices_online\" => 0,\r\n  \"ping_timeout\" => 60,\r\n  \"mode\" => \"all_traffic\",\r\n  \"ipv6\" => false,\r\n  \"otp_auth\" => false,\r\n  \"jumbo_frames\" => false,\r\n  \"multi_device\" => false,\r\n  \"search_domain\" => \"example.com\",\r\n  \"cipher\" => \"aes256\"\r\n}\r\n```\r\n\r\n### Create a new server.\r\n\r\n```ruby\r\n@pritunl.server.create(\r\n  name: 'server1',\r\n  network: '10.11.6.0/24',\r\n  bind_address: nil,\r\n  port: 12533,\r\n  protocol: 'udp',\r\n  dh_param_bits: 2048,\r\n  mode: 'all_traffic',\r\n  network_mode: 'tunnel',\r\n  network_start: nil,\r\n  network_end: nil,\r\n  multi_device: false,\r\n  local_networks: [],\r\n  dns_servers: ['8.8.4.4'],\r\n  search_domain: 'pritunl.com',\r\n  otp_auth: false,\r\n  cipher: 'aes256',\r\n  jumbo_frames: false,\r\n  lzo_compression: false,\r\n  inter_client: true,\r\n  ping_interval: 10,\r\n  ping_timeout: 60,\r\n  max_clients: 2048,\r\n  replica_count: 1,\r\n  debug: false\r\n)\r\n```\r\n\r\n### Update an existing server.\r\n\r\n```ruby\r\n@pritunl.server.update( server['id'], name: 'server1-rename', dns_servers: ['8.8.8.8', '8.8.4.4'] )\r\n```\r\n\r\n### Delete an existing server.\r\n\r\n```ruby\r\n@pritunl.server.delete( server['id'] )\r\n```\r\n\r\n### Start, stop or restart an existing server.\r\n\r\n```ruby\r\n@pritunl.server.start( server['id'] )\r\n@pritunl.server.stop( server['id'] )\r\n@pritunl.server.restart( server['id'] )\r\n```\r\n\r\n### Returns a list of organizations attached to a server.\r\n\r\n```ruby\r\n@pritunl.server.organizations( server['id'] )\r\n\r\n[\r\n  {\r\n    \"id\" => \"5678d0f48831390da53ef8ae\",\r\n    \"name\" => \"org1\",\r\n    \"server\" => \"5678d5286231390ea53eda96\"\r\n  },\r\n  {\r\n    \"id\" => \"5678d0f48831392ba71ad3cb\",\r\n    \"name\" => \"org2\",\r\n    \"server\" => \"5678d5286231390ea53eda96\"\r\n  }\r\n]\r\n```\r\n\r\n### Attach an organization to an existing server.\r\n\r\n```ruby\r\n@pritunl.server.attach_organization( server['id'], organization_id: org['id'] )\r\n\r\n{\r\n  \"id\" => \"5678d0f48831390da53ef8ae\",\r\n  \"name\" => \"org1\",\r\n  \"server\" => \"5678d5286231390ea53eda96\"\r\n}\r\n```\r\n\r\n### Remove an organization from an existing server.\r\n\r\n```ruby\r\n@pritunl.server.remove_organization( server['id'], organization_id: org['id'] )\r\n```\r\n\r\n### Get the output of a server.\r\n\r\n```ruby\r\n@pritunl.server.output( server['id'] )\r\n\r\n{\r\n  \"id\" => \"5678d5286231390ea53eda96\",\r\n  \"output\" => [\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 OpenVPN 2.3.2 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [EPOLL] [PKCS11] [eurephia] [MH] [IPv6] built on Dec  1 2014\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 Control Channel Authentication: tls-auth using INLINE static key file\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 TUN/TAP device tun11 opened\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 do_ifconfig, tt->ipv6=0, tt->did_ifconfig_ipv6_setup=0\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 /sbin/ip link set dev tun11 up mtu 1500\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 /sbin/ip addr add dev tun11 10.11.6.1/24 broadcast 10.11.6.255\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 UDPv4 link local (bound): [undef]\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 UDPv4 link remote: [undef]\",\r\n    \"[patient-forest-4024] Mon Dec 21 23:45:15 2015 Initialization Sequence Completed\"\r\n  ]\r\n}\r\n```\r\n\r\n### Clear the output of a server.\r\n\r\n```ruby\r\n@pritunl.server.clear_output( server['id'] )\r\n```\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/eterry1388/pritunl_api_client.  Please make sure\r\nall tests pass before making a pull request.  The tests are system tests (not unit tests), so please have a live Pritunl\r\nserver up and running when executing the tests.\r\n\r\n### How to run system tests\r\n\r\n```bash\r\nBASE_URL='https://your-ip-address:9700' API_TOKEN='your-api-token' API_SECRET='your-api-secret' rspec\r\n```\r\n\r\nThe output should look something like this:\r\n\r\n```\r\nPritunlApiClient\r\n  Ping server\r\n  Get server status\r\n  Get logs\r\n  Get events\r\n  PritunlApiClient::Organization\r\n    Create organization\r\n    Find organization\r\n    Update organization\r\n    Get all organizations\r\n    Delete organization\r\n  PritunlApiClient::User\r\n    Create user\r\n    Find user\r\n    Update user\r\n    Get all users\r\n    Generate two-step auth for user\r\n    Delete user\r\n  PritunlApiClient::Key\r\n    Download key\r\n    Get key\r\n    Download tar key\r\n    Get tar key\r\n    Download zip key\r\n    Get zip key\r\n    Download chromebook profile onc zip key\r\n    Get chromebook profile onc zip key\r\n    Get key temporary url\r\n  PritunlApiClient::Server\r\n    Create server\r\n    Find server\r\n    Get all servers\r\n    Update server\r\n    Attach organization\r\n    Get all organizations on server\r\n    Remove organization\r\n    Start server\r\n    Restart server\r\n    Stop server\r\n    Get server output\r\n    Clear server output\r\n  PritunlApiClient::Settings\r\n    Get all settings\r\n    Update settings\r\n\r\nFinished in 1 minute 11.62 seconds (files took 0.17043 seconds to load)\r\n38 examples, 0 failures\r\n```\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}